package appenv_test

import (
	"strings"
	"testing"

	testtarget "github.com/kyoh86/appenv"
	"github.com/kyoh86/appenv/internal/def"
	"github.com/kyoh86/appenv/internal/fs"
)

func checkHeader(t *testing.T, header []string, content string) {
	t.Helper()
	lines := strings.Split(content, "\n")
	if len(lines) < len(header) {
		t.Fatalf("header shortage: %#v", lines)
	}
	for index, header := range header {
		if lines[index] != header {
			t.Errorf("expected header %q does not equal %q at %d", header, lines[index], index)
		}
	}
}

func TestBearHeader(t *testing.T) {
	t.Parallel()
	res := fs.Memory{}
	gen := &testtarget.Generator{}
	if err := gen.Render(
		"github.com/kyoh86/appenv/testdir",
		res,
		testtarget.Opt(new(def.HostName), testtarget.StoreYAML()),
		testtarget.Opt(new(def.Token), testtarget.StoreKeyring()),
		testtarget.Opt(new(def.DryRun), testtarget.StoreEnvar()),
	); err != nil {
		t.Fatalf("render: %s", err)
	}
	var headers = []string{
		"// Code generated by github.com/kyoh86/appenv.Generator DO NOT EDIT.",
		"",
		"package testdir",
	}
	t.Run(testtarget.AccessFile, func(t *testing.T) {
		checkHeader(t, headers, res.Result(testtarget.AccessFile))
	})
	t.Run(testtarget.ConfigFile, func(t *testing.T) {
		checkHeader(t, headers, res.Result(testtarget.ConfigFile))
	})
	t.Run(testtarget.AppenvFile, func(t *testing.T) {
		checkHeader(t, headers, res.Result(testtarget.AppenvFile))
	})
	t.Run(testtarget.YAMLFile, func(t *testing.T) {
		checkHeader(t, headers, res.Result(testtarget.YAMLFile))
	})
	t.Run(testtarget.KeyringFile, func(t *testing.T) {
		checkHeader(t, headers, res.Result(testtarget.KeyringFile))
	})
	t.Run(testtarget.EnvarFile, func(t *testing.T) {
		checkHeader(t, headers, res.Result(testtarget.EnvarFile))
	})
}

func TestTaggedHeader(t *testing.T) {
	t.Parallel()
	res := fs.Memory{}
	gen := &testtarget.Generator{
		BuildTag: "buildtag",
	}
	if err := gen.Render(
		"github.com/kyoh86/appenv/testdir",
		res,
		testtarget.Opt(new(def.HostName), testtarget.StoreYAML()),
		testtarget.Opt(new(def.Token), testtarget.StoreKeyring()),
		testtarget.Opt(new(def.DryRun), testtarget.StoreEnvar()),
	); err != nil {
		t.Fatalf("render: %s", err)
	}
	var headers = []string{
		"// +build buildtag",
		"",
		"// Code generated by github.com/kyoh86/appenv.Generator DO NOT EDIT.",
		"",
		"package testdir",
	}
	t.Run(testtarget.AccessFile, func(t *testing.T) {
		checkHeader(t, headers, res.Result(testtarget.AccessFile))
	})
	t.Run(testtarget.ConfigFile, func(t *testing.T) {
		checkHeader(t, headers, res.Result(testtarget.ConfigFile))
	})
	t.Run(testtarget.AppenvFile, func(t *testing.T) {
		checkHeader(t, headers, res.Result(testtarget.AppenvFile))
	})
	t.Run(testtarget.YAMLFile, func(t *testing.T) {
		checkHeader(t, headers, res.Result(testtarget.YAMLFile))
	})
	t.Run(testtarget.KeyringFile, func(t *testing.T) {
		checkHeader(t, headers, res.Result(testtarget.KeyringFile))
	})
	t.Run(testtarget.EnvarFile, func(t *testing.T) {
		checkHeader(t, headers, res.Result(testtarget.EnvarFile))
	})
}

func TestNamedHeader(t *testing.T) {
	t.Parallel()
	res := fs.Memory{}
	gen := &testtarget.Generator{
		PackageName: "testpkg",
	}
	if err := gen.Render(
		"github.com/kyoh86/appenv/testdir",
		res,
		testtarget.Opt(new(def.HostName), testtarget.StoreYAML()),
		testtarget.Opt(new(def.Token), testtarget.StoreKeyring()),
		testtarget.Opt(new(def.DryRun), testtarget.StoreEnvar()),
	); err != nil {
		t.Fatalf("render: %s", err)
	}
	var headers = []string{
		"// Code generated by github.com/kyoh86/appenv.Generator DO NOT EDIT.",
		"",
		"package testpkg",
	}
	t.Run(testtarget.AccessFile, func(t *testing.T) {
		checkHeader(t, headers, res.Result(testtarget.AccessFile))
	})
	t.Run(testtarget.ConfigFile, func(t *testing.T) {
		checkHeader(t, headers, res.Result(testtarget.ConfigFile))
	})
	t.Run(testtarget.AppenvFile, func(t *testing.T) {
		checkHeader(t, headers, res.Result(testtarget.AppenvFile))
	})
	t.Run(testtarget.YAMLFile, func(t *testing.T) {
		checkHeader(t, headers, res.Result(testtarget.YAMLFile))
	})
	t.Run(testtarget.KeyringFile, func(t *testing.T) {
		checkHeader(t, headers, res.Result(testtarget.KeyringFile))
	})
	t.Run(testtarget.EnvarFile, func(t *testing.T) {
		checkHeader(t, headers, res.Result(testtarget.EnvarFile))
	})
}
