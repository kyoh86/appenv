package appenv

import (
	"fmt"
	"os"
	"path/filepath"
	"runtime"

	"github.com/dave/jennifer/jen"
	"github.com/kyoh86/appenv/internal/fs"
)

// Generate a configuration handlers from options.
//
// Name, type and default value of options must be defined like:
// https://pkg.go.dev/github.com/kyoh86/appenv/internal/def
func Generate(packagePath, outDir string, options ...*option) error {
	return new(Generator).Do(packagePath, outDir, options...)
}

// Generator will generate a configuration handlers
// from options with custom package name and custom build tag.
type Generator struct {
	PackageName string
	BuildTag    string

	name string

	storeYAML    bool
	storeKeyring bool
	storeEnvar   bool
}

const (
	pkgYAML    = "github.com/goccy/go-yaml"
	pkgKeyring = "github.com/zalando/go-keyring"
	pkgTypes   = "github.com/kyoh86/appenv/types"
	pkgStrcase = "github.com/stoewer/go-strcase"
)

func (g *Generator) init() error {
	g.name = "env.generator"
	if _, file, _, ok := runtime.Caller(2); ok {
		cwd, err := os.Getwd()
		if err != nil {
			return err
		}
		rel, err := filepath.Rel(cwd, file)
		if err != nil {
			return err
		}
		g.name = rel
	}

	g.storeYAML = false
	g.storeKeyring = false
	g.storeEnvar = false

	return nil
}

func (g *Generator) createFile(packagePath string) *jen.File {
	var file *jen.File
	if g.PackageName != "" {
		file = jen.NewFilePathName(packagePath, g.PackageName)
	} else {
		file = jen.NewFilePath(packagePath)
	}
	if g.BuildTag != "" {
		file.HeaderComment(fmt.Sprintf("// +build %s\n", g.BuildTag))
	}
	file.HeaderComment(fmt.Sprintf("// Code generated by %s DO NOT EDIT.", g.name))
	return file
}

func (g *Generator) parseOpts(options []*option) {
	for _, o := range options {
		g.storeYAML = g.storeYAML || o.storeYAML
		g.storeKeyring = g.storeKeyring || o.storeKeyring
		g.storeEnvar = g.storeEnvar || o.storeEnvar
	}
}

func (g *Generator) genAccess(file *jen.File, options []*option) {
	file.Func().Id("GetAccess").ParamsFunc(func(accessParams *jen.Group) {
		if g.storeYAML {
			accessParams.Id("yamlReader").Qual("io", "Reader")
		}
		if g.storeKeyring {
			accessParams.Id("keyringService").String()
		}
		if g.storeEnvar {
			accessParams.Id("envarPrefix").String()
		}
	}).Params(jen.Id("access").Id("Access"), jen.Err().Id("error")).BlockFunc(func(accessCodes *jen.Group) {
		if g.storeYAML {
			accessCodes.List(jen.Id("yml"), jen.Err()).
				Op(":=").Id("loadYAML").Call(jen.Id("yamlReader"))
			accessCodes.If(jen.Err().Op("!=").Nil()).Block(
				jen.Return(jen.Id("access"), jen.Err()),
			)
		}
		accessCodes.Return(jen.Id("buildAccess").CallFunc(func(paramCodes *jen.Group) {
			if g.storeYAML {
				paramCodes.Add(jen.Id("yml"))
			}
			if g.storeKeyring {
				paramCodes.Add(jen.Id("keyringService"))
			}
			if g.storeEnvar {
				paramCodes.Add(jen.Id("envarPrefix"))
			}
		}))
	}).Line()

	file.Func().Id("buildAccess").ParamsFunc(func(accessParams *jen.Group) {
		if g.storeYAML {
			accessParams.Id("yml").Id("YAML")
		}
		if g.storeKeyring {
			accessParams.Id("keyringService").String()
		}
		if g.storeEnvar {
			accessParams.Id("envarPrefix").String()
		}
	}).Params(jen.Id("access").Id("Access"), jen.Err().Id("error")).BlockFunc(func(accessCodes *jen.Group) {
		if g.storeKeyring {
			accessCodes.List(jen.Id("keyring"), jen.Err()).
				Op(":=").Id("loadKeyring").Call(jen.Id("keyringService"))
			accessCodes.If(jen.Err().Op("!=").Nil()).Block(
				jen.Return(jen.Id("access"), jen.Err()),
			)
		}
		if g.storeEnvar {
			accessCodes.List(jen.Id("envar"), jen.Err()).
				Op(":=").Id("getEnvar").Call(jen.Id("envarPrefix"))
			accessCodes.If(jen.Err().Op("!=").Nil()).Block(
				jen.Return(jen.Id("access"), jen.Err()),
			)
		}
		file.Type().Id("Access").StructFunc(func(accessFields *jen.Group) {
			for _, o := range options {
				accessFields.Id(o.camelName).Add(o.valueType)

				file.Func().Params(jen.Id("a").Id("*Access")).Id(o.name).Params().Add(o.valueType).Block(
					jen.Return(jen.Id("a").Dot(o.camelName)),
				).Line()

				accessCodes.Id("access").Dot(o.camelName).Op("=").New(jen.Qual(o.pkgPath, o.name)).Dot("Default").Call().Assert(o.valueType)
				if o.storeYAML {
					g.tryAccess(accessCodes, "yml", o)
				}
				if o.storeKeyring {
					g.tryAccess(accessCodes, "keyring", o)
				}
				if o.storeEnvar {
					g.tryAccess(accessCodes, "envar", o)
				}
				accessCodes.Line()
			}
		})
		accessCodes.Return()
	})
}

func (g *Generator) tryAccess(accessCodes *jen.Group, srcName string, o *option) {
	accessCodes.If(jen.Id(srcName).Dot(o.name).Op("!=").Nil()).Block(
		jen.Id("access").Dot(o.camelName).Op("=").Id(srcName).Dot(o.name).Dot("Value").Call().Assert(o.valueType),
	)
}

func (g *Generator) genAppenv(file *jen.File) {
	file.Func().Id("GetAppenv").ParamsFunc(func(getAppenvParams *jen.Group) {
		if g.storeYAML {
			getAppenvParams.Id("yamlReader").Qual("io", "Reader")
		}
		if g.storeKeyring {
			getAppenvParams.Id("keyringService").String()
		}
		if g.storeEnvar {
			getAppenvParams.Id("envarPrefix").String()
		}
	}).Params(jen.Id("config").Id("Config"), jen.Id("access").Id("Access"), jen.Err().Id("error")).BlockFunc(func(getAppenvCodes *jen.Group) {
		if g.storeYAML {
			getAppenvCodes.List(jen.Id("yml"), jen.Err()).
				Op(":=").Id("loadYAML").Call(jen.Id("yamlReader"))
			getAppenvCodes.If(jen.Err().Op("!=").Nil()).Block(
				jen.Return(jen.Id("config"), jen.Id("access"), jen.Err()),
			)
		}
		getAppenvCodes.List(jen.Id("config"), jen.Err()).
			Op("=").Id("buildConfig").CallFunc(func(paramCodes *jen.Group) {
			if g.storeYAML {
				paramCodes.Add(jen.Id("yml"))
			}
			if g.storeKeyring {
				paramCodes.Add(jen.Id("keyringService"))
			}
		})
		getAppenvCodes.If(jen.Err().Op("!=").Nil()).Block(
			jen.Return(jen.Id("config"), jen.Id("access"), jen.Err()),
		)
		getAppenvCodes.List(jen.Id("access"), jen.Err()).
			Op("=").Id("buildAccess").CallFunc(func(paramCodes *jen.Group) {
			if g.storeYAML {
				paramCodes.Add(jen.Id("yml"))
			}
			if g.storeKeyring {
				paramCodes.Add(jen.Id("keyringService"))
			}
			if g.storeEnvar {
				paramCodes.Add(jen.Id("envarPrefix"))
			}
		})
		getAppenvCodes.If(jen.Err().Op("!=").Nil()).Block(
			jen.Return(jen.Id("config"), jen.Id("access"), jen.Err()),
		)
		getAppenvCodes.Return(jen.Id("config"), jen.Id("access"), jen.Nil())
	}).Line()
}

func (g *Generator) genConfig(file *jen.File, options []*option) {
	file.Type().Id("Config").StructFunc(func(configFields *jen.Group) {
		if g.storeYAML {
			configFields.Id("yml").Id("YAML")
		}
		if g.storeKeyring {
			configFields.Id("keyring").Id("Keyring")
		}
	}).Line()

	file.Func().Id("GetConfig").ParamsFunc(func(getConfigParams *jen.Group) {
		if g.storeYAML {
			getConfigParams.Id("yamlReader").Qual("io", "Reader")
		}
		if g.storeKeyring {
			getConfigParams.Id("keyringService").String()
		}
	}).Params(jen.Id("config").Id("Config"), jen.Err().Id("error")).BlockFunc(func(getConfigCodes *jen.Group) {
		if g.storeYAML {
			getConfigCodes.List(jen.Id("yml"), jen.Err()).
				Op(":=").Id("loadYAML").Call(jen.Id("yamlReader"))
			getConfigCodes.If(jen.Err().Op("!=").Nil()).Block(
				jen.Return(jen.Id("config"), jen.Err()),
			)
		}
		getConfigCodes.Return(jen.Id("buildConfig").CallFunc(func(paramCodes *jen.Group) {
			if g.storeYAML {
				paramCodes.Add(jen.Id("yml"))
			}
			if g.storeKeyring {
				paramCodes.Add(jen.Id("keyringService"))
			}
		}))
	}).Line()

	file.Func().Id("buildConfig").ParamsFunc(func(buildConfigParams *jen.Group) {
		if g.storeYAML {
			buildConfigParams.Id("yml").Id("YAML")
		}
		if g.storeKeyring {
			buildConfigParams.Id("keyringService").String()
		}
	}).Params(jen.Id("config").Id("Config"), jen.Err().Id("error")).BlockFunc(func(buildConfigCodes *jen.Group) {
		if g.storeKeyring {
			buildConfigCodes.List(jen.Id("keyring"), jen.Err()).
				Op(":=").Id("loadKeyring").Call(jen.Id("keyringService"))
			buildConfigCodes.If(jen.Err().Op("!=").Nil()).Block(
				jen.Return(jen.Id("config"), jen.Err()),
			)
		}
		if g.storeYAML {
			buildConfigCodes.Id("config").Dot("yml").Op("=").Id("yml")
		}
		if g.storeKeyring {
			buildConfigCodes.Id("config").Dot("keyring").Op("=").Id("keyring")
		}
		buildConfigCodes.Return()
	}).Line()

	file.Func().Params(jen.Id("c").Id("*Config")).Id("Save").ParamsFunc(func(configParams *jen.Group) {
		if g.storeYAML {
			configParams.Id("yamlWriter").Qual("io", "Writer")
		}
		if g.storeKeyring {
			configParams.Id("keyringService").String()
		}
	}).Params(jen.Id("error")).BlockFunc(func(saveConfigCodes *jen.Group) {
		if g.storeYAML {
			saveConfigCodes.If(
				jen.Err().Op(":=").Id("saveYAML").Call(jen.Id("yamlWriter"), jen.Id("&c").Dot("yml")),
				jen.Err().Op("!=").Nil(),
			).Block(
				jen.Return(jen.Err()),
			)
		}
		if g.storeKeyring {
			saveConfigCodes.If(
				jen.Err().Op(":=").Id("saveKeyring").Call(jen.Id("keyringService"), jen.Id("&c").Dot("keyring")),
				jen.Err().Op("!=").Nil(),
			).Block(
				jen.Return(jen.Err()),
			)
		}
		saveConfigCodes.Return(jen.Nil())
	}).Line()

	file.Func().Id("OptionNames").Call().Params(jen.Index().String()).Block(
		jen.Return().Index().String().ValuesFunc(func(namesList *jen.Group) {
			file.Func().Params(jen.Id("a").Id("*Config")).Id("Option").Params(jen.Id("name").String()).Params(jen.Qual(pkgTypes, "Config"), jen.Id("error")).Block(
				jen.Switch(jen.Id("name")).BlockFunc(func(optSwitch *jen.Group) {
					for _, o := range options {
						o := o
						// Add option name
						namesList.Lit(o.dottedName)

						// Add option case
						optSwitch.Case(jen.Lit(o.dottedName)).
							Block(jen.Return(jen.Id("&"+o.camelName+"Config").Values(jen.Dict{
								jen.Id("parent"): jen.Id("a"),
							}), jen.Nil()))

						// Add option func
						file.Func().Params(jen.Id("a").Id("*Config")).Id(o.name).Params().Params(jen.Qual(pkgTypes, "Config")).Block(
							jen.Return(jen.Id("&" + o.camelName + "Config").Values(jen.Dict{jen.Id("parent"): jen.Id("a")})),
						)

						// Build Poperty Config
						file.Type().Id(o.camelName + "Config").Struct(
							jen.Id("parent").Id("*Config"),
						)

						// Implement "Get" Func
						file.Func().Params(jen.Id("a").Id("*"+o.camelName+"Config")).Id("Get").Params().Params(jen.String(), jen.Id("error")).BlockFunc(func(getCodes *jen.Group) {
							if o.storeYAML {
								g.tryGet(getCodes, "yml", o)
							}
							if o.storeKeyring {
								g.tryGet(getCodes, "keyring", o)
							}
							getCodes.Return(jen.Lit(""), jen.Nil())
						}).Line()

						// Implement "Set" Func
						file.Func().Params(jen.Id("a").Id("*" + o.camelName + "Config")).Id("Set").Params(jen.Id("value").String()).Params(jen.Id("error")).BlockFunc(func(setCodes *jen.Group) {
							if o.storeYAML {
								g.trySet(setCodes, "yml", o)
							}
							if o.storeKeyring {
								g.trySet(setCodes, "keyring", o)
							}
							setCodes.Return(jen.Nil())
						}).Line()

						// Implement "Unset" Func
						file.Func().Params(jen.Id("a").Id("*" + o.camelName + "Config")).Id("Unset").Params().BlockFunc(func(unsetCodes *jen.Group) {
							if o.storeYAML {
								g.tryUnset(unsetCodes, "yml", o)
							}
							if o.storeKeyring {
								g.tryUnset(unsetCodes, "keyring", o)
							}
						}).Line()
					}
				}),
				jen.Return(jen.Nil(), jen.Qual("fmt", "Errorf").Call(jen.Lit("invalid option name %q"), jen.Id("name"))),
			).Line()
		}),
	).Line()

}

func (g *Generator) tryGet(getCodes *jen.Group, srcName string, o *option) {
	getCodes.Block(
		jen.Id("p").Op(":=").Id("a").Dot("parent").Dot(srcName).Dot(o.name),
		jen.If(jen.Id("p").Op("!=").Nil()).BlockFunc(func(ifBlock *jen.Group) {
			ifBlock.List(jen.Id("text"), jen.Err()).Op(":=").Id("p").Dot("MarshalText").Call()
			if o.mask {
				ifBlock.Return(jen.Id("p").Dot("Mask").Call(jen.String().Call(jen.Id("text"))), jen.Err())
			} else {
				ifBlock.Return(jen.String().Call(jen.Id("text")), jen.Err())
			}
		}),
	)
}

func (g *Generator) trySet(setCodes *jen.Group, srcName string, o *option) {
	setCodes.Block(
		jen.Id("p").Op(":=").Id("a").Dot("parent").Dot(srcName).Dot(o.name),
		jen.If(jen.Id("p").Op("==").Nil()).Block(
			jen.Id("p").Op("=").New(jen.Qual(o.pkgPath, o.name)),
		),
		jen.If(
			jen.Err().Op(":=").Id("p").Dot("UnmarshalText").Call(jen.Id("[]byte").Call(jen.Id("value"))),
			jen.Err().Op("!=").Nil(),
		).Block(
			jen.Return(jen.Err()),
		),
		jen.Id("a").Dot("parent").Dot(srcName).Dot(o.name).Op("=").Id("p"),
	)
}

func (g *Generator) tryUnset(unsetCodes *jen.Group, srcName string, o *option) {
	unsetCodes.Id("a").Dot("parent").Dot(srcName).Dot(o.name).Op("=").Nil()
}

func (g *Generator) genYAML(file *jen.File, options []*option) {
	file.Type().Id("YAML").StructFunc(func(yamlFields *jen.Group) {
		for _, o := range options {
			if !o.storeYAML {
				continue
			}
			yamlFields.Id(o.name).
				Op("*").Qual(o.pkgPath, o.name).
				Tag(map[string]string{"yaml": o.camelName + ",omitempty"})
		}
	})
	file.Line()

	file.Func().Id("saveYAML").
		Params(
			jen.Id("w").Qual("io", "Writer"),
			jen.Id("yml").Id("*YAML"),
		).
		Add(jen.Id("error")).
		Block(
			jen.Return(
				jen.Qual("github.com/goccy/go-yaml", "NewEncoder").Call(jen.Id("w")).
					Op(".").
					Id("Encode").Call(jen.Id("yml")),
			),
		)
	file.Line()
	file.Var().Id("EmptyYAMLReader").Qual("io", "Reader").Op("=").Nil()
	file.Func().Id("loadYAML").
		Params(
			jen.Id("r").Qual("io", "Reader"),
		).
		Params(
			jen.Id("yml").Id("YAML"),
			jen.Err().Id("error"),
		).
		Block(
			jen.If(jen.Id("r").Op("==").Id("EmptyYAMLReader")).Block(
				jen.Return(),
			),
			jen.Err().Op("=").Qual("github.com/goccy/go-yaml", "NewDecoder").Call(jen.Id("r")).
				Op(".").
				Id("Decode").Call(jen.Op("&").Id("yml")),
			jen.Return(),
		)
	file.Line()
}

func (g *Generator) genKeyring(file *jen.File, options []*option) {
	file.Const().Id("DiscardKeyringService").String().Op("=").Lit("")

	file.Type().Id("Keyring").StructFunc(func(keyringFields *jen.Group) {
		file.Func().Id("loadKeyring").Params(jen.Id("keyringService").String()).Params(jen.Id("key").Id("Keyring"), jen.Err().Id("error")).BlockFunc(func(loadKeyringCodes *jen.Group) {
			file.Func().Id("saveKeyring").Params(jen.Id("keyringService").String(), jen.Id("key").Id("*Keyring")).Params(jen.Err().Id("error")).BlockFunc(func(saveKeyringCodes *jen.Group) {
				loadKeyringCodes.If(jen.Id("keyringService").Op("==").Id("DiscardKeyringService")).Block(jen.Return())
				saveKeyringCodes.If(jen.Id("keyringService").Op("==").Id("DiscardKeyringService")).Block(jen.Return())
				for _, o := range options {
					if !o.storeKeyring {
						continue
					}
					keyringFields.Id(o.name).
						Op("*").Qual(o.pkgPath, o.name)
					loadKeyringCodes.Block(jen.List(jen.Id("v"), jen.Err()).Op(":=").Qual(pkgKeyring, "Get").
						Call(jen.Id("keyringService"), jen.Lit(o.kebabName)),
						jen.If(jen.Err().Op("==").Nil()).Block(
							jen.Var().Id("value").Qual(o.pkgPath, o.name),
							jen.If(
								jen.Err().Op("=").Id("value").Dot("UnmarshalText").Call(jen.Index().Byte().Parens(jen.Id("v"))),
								jen.Err().Op("!=").Nil(),
							).Block(
								jen.Return(jen.Id("key"), jen.Err()),
							),
							jen.Id("key").Dot(o.name).Op("=").Id("&value"),
						),
					)
					saveKeyringCodes.Block(
						jen.List(jen.Id("buf"), jen.Err()).Op(":=").Id("key").Dot(o.name).Dot("MarshalText").Call(),
						jen.If(jen.Err().Op("!=").Nil()).Block(
							jen.Return(jen.Err()),
						),
						jen.If(
							jen.Err().Op(":=").Qual(pkgKeyring, "Set").Call(jen.Id("keyringService"), jen.Lit(o.kebabName), jen.String().Call(jen.Id("buf"))),
							jen.Err().Op("!=").Nil(),
						).Block(
							jen.Return(jen.Err()),
						),
					)
				}
				loadKeyringCodes.Return()
				saveKeyringCodes.Return(jen.Nil())
			})
		}).Line()
	})
}

func (g *Generator) genEnvar(file *jen.File, options []*option) {
	file.Type().Id("Envar").StructFunc(func(envarFields *jen.Group) {
		file.Func().Id("getEnvar").Params(jen.Id("prefix").String()).Params(jen.Id("envar").Id("Envar"), jen.Err().Id("error")).BlockFunc(func(loadEnvarCodes *jen.Group) {
			loadEnvarCodes.Id("prefix").Op("=").Qual(pkgStrcase, "UpperSnakeCase").Call(jen.Id("prefix"))
			for _, o := range options {
				if !o.storeEnvar {
					continue
				}
				envarFields.Id(o.name).
					Op("*").Qual(o.pkgPath, o.name)

				loadEnvarCodes.Block(jen.List(jen.Id("v")).Op(":=").Qual("os", "Getenv").
					Call(jen.Id("prefix").Op("+").Lit(o.snakeName)),
					jen.If(jen.Id("v").Op("!=").Lit("")).Block(
						jen.Var().Id("value").Qual(o.pkgPath, o.name),
						jen.If(
							jen.Err().Op("=").Id("value").Dot("UnmarshalText").Call(jen.Index().Byte().Parens(jen.Id("v"))),
							jen.Err().Op("!=").Nil(),
						).Block(
							jen.Return(jen.Id("envar"), jen.Err()),
						),
						jen.Id("envar").Dot(o.name).Op("=").Id("&value"),
					),
				)
			}
			loadEnvarCodes.Return()
		}).Line()
	}).Line()
}

func (g *Generator) Render(packagePath string, manager fs.FileManager, options ...*option) error {
	if err := g.init(); err != nil {
		return err
	}

	g.parseOpts(options)

	accessFile := g.createFile(packagePath)
	g.genAccess(accessFile, options)
	if err := renderFile(accessFile, manager, "access_gen.go"); err != nil {
		return err
	}

	configFile := g.createFile(packagePath)
	g.genConfig(configFile, options)
	if err := renderFile(configFile, manager, "config_gen.go"); err != nil {
		return err
	}

	appenvFile := g.createFile(packagePath)
	g.genAppenv(appenvFile)
	if err := renderFile(appenvFile, manager, "appenv_gen.go"); err != nil {
		return err
	}

	if g.storeYAML {
		ymlFile := g.createFile(packagePath)
		ymlFile.ImportAlias(pkgYAML, "yaml")
		g.genYAML(ymlFile, options)
		if err := renderFile(ymlFile, manager, "yml_gen.go"); err != nil {
			return err
		}
	}

	if g.storeKeyring {
		keyringFile := g.createFile(packagePath)
		keyringFile.ImportAlias(pkgKeyring, "keyring")
		g.genKeyring(keyringFile, options)
		if err := renderFile(keyringFile, manager, "keyring_gen.go"); err != nil {
			return err
		}
	}

	if g.storeEnvar {
		envarFile := g.createFile(packagePath)
		g.genEnvar(envarFile, options)
		if err := renderFile(envarFile, manager, "envar_gen.go"); err != nil {
			return err
		}
	}

	return nil
}

func renderFile(file *jen.File, manager fs.FileManager, name string) error {
	output, err := manager.Open(name)
	if err != nil {
		return err
	}
	defer output.Close()
	return file.Render(output)
}

func (g *Generator) Do(packagePath, outDir string, options ...*option) error {
	return g.Render(packagePath, fs.Dir(outDir), options...)
}
