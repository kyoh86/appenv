// Code generated by generate.go DO NOT EDIT.

package out

import (
	"fmt"
	def "github.com/kyoh86/appenv/internal/def"
	types "github.com/kyoh86/appenv/types"
	"io"
)

type Config struct {
	yml YAML
}

func GetConfig(yamlReader io.Reader) (config Config, err error) {
	yml, err := loadYAML(yamlReader)
	if err != nil {
		return config, err
	}
	return buildConfig(yml)
}

func buildConfig(yml YAML) (config Config, err error) {
	config.yml = yml
	return
}

func (c *Config) Save(yamlWriter io.Writer) error {
	if err := saveYAML(yamlWriter, &c.yml); err != nil {
		return err
	}
	return nil
}

func PropertyNames() []string {
	return []string{"token", "host.name", "dry.run"}
}

func (a *Config) Property(name string) (types.Config, error) {
	switch name {
	case "token":
		return &tokenConfig{parent: a}, nil
	case "host.name":
		return &hostNameConfig{parent: a}, nil
	case "dry.run":
		return &dryRunConfig{parent: a}, nil
	}
	return nil, fmt.Errorf("invalid property name %q", name)
}

func (a *Config) Token() types.Config {
	return &tokenConfig{parent: a}
}

type tokenConfig struct {
	parent *Config
}

func (a *tokenConfig) Get() (string, error) {
	{
		p := a.parent.yml.Token
		if p != nil {
			text, err := p.MarshalText()
			return string(text), err
		}
	}
	return "", nil
}

func (a *tokenConfig) Set(value string) error {
	{
		p := a.parent.yml.Token
		if p == nil {
			p = new(def.Token)
		}
		if err := p.UnmarshalText([]byte(value)); err != nil {
			return err
		}
		a.parent.yml.Token = p
	}
	return nil
}

func (a *tokenConfig) Unset() {
	a.parent.yml.Token = nil
}

func (a *Config) HostName() types.Config {
	return &hostNameConfig{parent: a}
}

type hostNameConfig struct {
	parent *Config
}

func (a *hostNameConfig) Get() (string, error) {
	{
		p := a.parent.yml.HostName
		if p != nil {
			text, err := p.MarshalText()
			return string(text), err
		}
	}
	return "", nil
}

func (a *hostNameConfig) Set(value string) error {
	{
		p := a.parent.yml.HostName
		if p == nil {
			p = new(def.HostName)
		}
		if err := p.UnmarshalText([]byte(value)); err != nil {
			return err
		}
		a.parent.yml.HostName = p
	}
	return nil
}

func (a *hostNameConfig) Unset() {
	a.parent.yml.HostName = nil
}

func (a *Config) DryRun() types.Config {
	return &dryRunConfig{parent: a}
}

type dryRunConfig struct {
	parent *Config
}

func (a *dryRunConfig) Get() (string, error) {
	return "", nil
}

func (a *dryRunConfig) Set(value string) error {
	return nil
}

func (a *dryRunConfig) Unset() {}
